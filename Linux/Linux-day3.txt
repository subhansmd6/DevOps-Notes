Date:19-02-2025

**How We Can Monitor Linux Using Command:**

**TOP (Table of Processes) Command:**
The `top` command shows a dynamic, real-time view of running processes and kernel-managed tasks in Linux. It provides system information and a summary of resource utilization, including CPU and memory usage.

- Running `top` without any options displays a live view of all processes running on the system.
- The `top` command output is divided into several sections, each with specific information about system performance and processes.

### **Header Information:**
This section shows basic system stats like uptime, active users, and recent system load.

- `up` - Displays the system running time since the last reboot.
- `users` - Shows the current number of active users.
- `load average` - Lists the average system load over the last 1, 5, and 15 minutes. Lower values indicate less CPU demand.

### **Tasks:**
This section provides a quick overview of all running processes and their states:
- `total` - Indicates the number of processes currently running on the system.
- `running` - Number of processes actively using CPU resources.
- `sleeping` - Processes waiting for an event to continue (e.g., input/output).
- `stopped` - Processes paused or waiting for a signal.
- `zombie` - Processes that have finished execution but remain in the process table.

### **CPU Usage:**
This section shows how various processes are using the CPU.

- `%us` - Time the CPU spends on user (non-kernel) processes.
- `%sy` - Time spent on system/kernel processes.
- `%ni` - Time spent on user processes with adjusted priority (nice values).
- `%id` - Percentage of time the CPU is idle.
- `%wa` - Time spent waiting for I/O operations (like disk access).
- `%hi` - Time handling hardware interrupts.
- `%si` - Time handling software interrupts.
- `%st` - Time "stolen" from the virtual machine by the hypervisor (when using virtualization).

### **Memory Usage (Mem):**
This section shows how the system uses physical RAM.
- `total` - Total physical memory available.
- `free` - Unused RAM memory.
- `used` - Total memory in use by the system.
- `buff/cache` - Memory reserved for buffers and caches. This memory can be reclaimed if needed by other processes.

---

### **Symbolic Mode Changing Permissions:**
- `r` - Read (4), `w` - Write (2), `x` - Execute (1)

Example:
- `744` means `rwx r-- r--` = **Owner: Read, Write, Execute | Group: Read | Others: Read**
- `777` means `rwx rwx rwx` = **Full permissions for everyone**

- `chmod u+x filename` - Add execute permission to owner
- `chmod g-w filename` - Remove write permission from group
- `chmod o=r filename` - Set read-only for others

### **Numeric Mode Permissions:**
- `chmod 755 filename` - Owner (7=rwx), Group (5=rx), Others (5=rx)
- By default, when we create a new file, the value is `644` (rw-r--r--).

### **Changing Ownership:**
- `sudo chown newowner filename` - Change owner of file/directory.
- `sudo chown <owner-name> <file/directory>`
  - Example: `chown ubuntu file1` (where `ubuntu` is the owner of `file1`).

- To change owner and group at the same time:
  ```sh
  chown <owner-name>:<group-name> <file/directory>
  ```
  - Example: `sudo chown ubuntu:ubuntu file1` (where `ubuntu` is both the owner and the group).

Recusrive Permission Changes:

Changes permissions recursively for all files and sub-directories.

		chown -R 755 <directory name>

Set default permissions for new files/directories:

By default when we create nw directory, the directory permission are 755 and when we create new 
file default permissions are 644. 


 

